import os
import random
import time
import datetime
import threading
from openai import OpenAI

# Clave de API de OpenAI
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "TU_OPENAI_API_KEY")

# Datos demogr√°ficos
EDADES = ["18-24 a√±os", "25-34 a√±os", "35-44 a√±os", "45-54 a√±os", "55-64 a√±os"]
SEXOS = ["Hombre", "Mujer"]
REGIONES = [
    "Regi√≥n Metropolitana", "Valpara√≠so", "Biob√≠o", "La Araucan√≠a", "Antofagasta", 
    "Coquimbo", "Los Lagos", "Maule", "O'Higgins", "Tarapac√°", "Los R√≠os", 
    "Arica y Parinacota", "Magallanes", "Atacama", "√ëuble", "Ays√©n"
]

# Nombres chilenos populares para generar nombres de usuario
NOMBRES_HOMBRE = [
    "Mat√≠as", "Sebasti√°n", "Benjam√≠n", "Vicente", "Mart√≠n", "Diego", "Joaqu√≠n", 
    "Felipe", "Tom√°s", "Agust√≠n", "Jos√©", "Francisco", "Ignacio", "Nicol√°s", 
    "Crist√≥bal", "Lucas", "Manuel", "Maximiliano", "Rodrigo", "Alejandro"
]
NOMBRES_MUJER = [
    "Sof√≠a", "Antonia", "Isidora", "Florencia", "Catalina", "Javiera", "Trinidad", 
    "Constanza", "Fernanda", "Emilia", "Valentina", "Victoria", "Francisca", 
    "Antonella", "Amanda", "Magdalena", "Josefa", "Camila", "Martina", "Laura"
]
APELLIDOS = [
    "Gonz√°lez", "Mu√±oz", "Rojas", "D√≠az", "P√©rez", "Soto", "Contreras", "Silva", 
    "Mart√≠nez", "Sep√∫lveda", "Morales", "Rodr√≠guez", "L√≥pez", "Fuentes", "Hern√°ndez", 
    "Torres", "Araya", "Flores", "Espinoza", "Valenzuela", "Castillo", "Tapia", 
    "Reyes", "Guti√©rrez", "Castro", "Vargas", "√Ålvarez", "V√°squez", "S√°nchez", "Fern√°ndez"
]

# Configuraci√≥n del cliente OpenAI
client = None

def configurar_openai():
    """Configura el cliente de OpenAI."""
    global client
    try:
        # Si no hay API key o es la placeholder, seguimos sin intentar conectar
        if OPENAI_API_KEY == "TU_OPENAI_API_KEY":
            print("Usando modo de simulaci√≥n sin conexi√≥n a OpenAI (datos ficticios)")
            client = None
            return True
            
        client = OpenAI(api_key=OPENAI_API_KEY)
        return True
    except Exception as e:
        print(f"Error al configurar OpenAI: {str(e)}")
        client = None
        # A√∫n retornamos True para continuar en modo de simulaci√≥n
        return True

def conectar_con_ia():
    """Intenta conectar con la API de OpenAI o contin√∫a en modo simulaci√≥n."""
    print("Conectando con la IA...")
    
    # Si no hay cliente configurado, usamos datos ficticios
    if client is None:
        print("Usando datos ficticios para la simulaci√≥n (sin conexi√≥n a OpenAI)")
        return True
        
    try:
        # Realizamos una petici√≥n de prueba para verificar la conexi√≥n
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # Volvemos a usar un modelo compatible
            messages=[{"role": "user", "content": "Hola, esto es una prueba de conexi√≥n."}],
            max_tokens=5
        )
        print("Conexi√≥n establecida. Procesando...")
        return True
    except Exception as e:
        print(f"""
Error: no se pudo conectar con la IA.
Causa: {str(e)}.
Soluci√≥n: revisa tu clave de OpenAI y tu conexi√≥n a Internet.
        """)
        print("Continuando en modo simulaci√≥n con datos ficticios...")
        return True

def generar_nombre_usuario(sexo):
    """Genera un nombre de usuario aleatorio basado en el sexo."""
    if sexo == "Hombre":
        nombre = random.choice(NOMBRES_HOMBRE)
    else:
        nombre = random.choice(NOMBRES_MUJER)
    
    apellido = random.choice(APELLIDOS)
    
    # Generar un username estilo Instagram
    formatos = [
        f"{nombre.lower()}{apellido.lower()}",
        f"{nombre.lower()}_{apellido.lower()}",
        f"{nombre.lower()}.{apellido.lower()}",
        f"{nombre.lower()}{random.randint(1, 999)}",
        f"{nombre.lower()}{apellido.lower()}{random.randint(1, 99)}",
        f"real_{nombre.lower()}",
        f"{nombre.lower()}_cl",
        f"{nombre.lower()}_{random.randint(1990, 2005)}"
    ]
    
    return random.choice(formatos)

def generar_comentario(edad, region, sexo):
    """Genera un comentario usando la API de OpenAI o comentarios ficticios si la API no est√° disponible."""
    # Lista de comentarios ficticios por si la API no est√° disponible
    comentarios_ficticios = [
        f"¬°Me encanta la ropa para perros! Mis peluditos en {region} siempre est√°n a la moda. üêï‚ù§Ô∏è",
        f"Como {sexo} de {region}, encuentro que estas prendas caninas son lo mejor para mi mascota.",
        f"Con {edad}, valoro mucho encontrar tiendas que entiendan lo que nuestros perritos necesitan. ¬°Seguir√© comprando aqu√≠!",
        f"Nunca pens√© que la ropa para perros pudiera ser tan linda. Mi chihuahua se ve incre√≠ble con sus nuevos outfits.",
        f"En {region} todos admiran a mi perrito cuando sale con su nueva chamarra. ¬°Gracias por estos dise√±os √∫nicos!",
        f"A mis {edad} he visto muchas tiendas, pero ninguna con dise√±os tan originales para nuestros amigos de cuatro patas.",
        f"Como {sexo} apasionado/a por las mascotas, aprecio la calidad de estas prendas. ¬°Mi golden retriever luce espectacular!",
        f"Encontrar ropa que le quede bien a mi bulldog franc√©s era imposible hasta que descubr√≠ esta cuenta. ¬°Ya no compro en otro lado!",
        f"Desde {region} quiero decirles que sus dise√±os son perfectos para el clima que tenemos aqu√≠. ¬°Mi perrito ya no tiembla de fr√≠o!",
        f"Con {edad}, me encanta consentir a mi mascota, y estas prendas son perfectas para hacerlo sentir especial."
    ]
    
    try:
        if OPENAI_API_KEY == "TU_OPENAI_API_KEY" or not client:
            # Si no hay API key configurada, usar comentarios ficticios
            return random.choice(comentarios_ficticios)
            
        prompt = f"Crea un comentario amigable, atractivo y emocional para una persona que tiene entre {edad}, vive en {region}, es de sexo {sexo} y ama la ropa para perros. Tono cercano y simp√°tico, sin vender directamente, con conexi√≥n emocional. M√°ximo 2 frases."
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # Volvemos a usar un modelo compatible
            messages=[{"role": "user", "content": prompt}],
            max_tokens=100
        )
        
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"Error al generar comentario: {str(e)}")
        return random.choice(comentarios_ficticios)

def generar_texto_publicacion(edad, region, sexo):
    """Genera un texto para publicaci√≥n usando la API de OpenAI o textos ficticios si la API no est√° disponible."""
    # Lista de textos ficticios para publicaciones
    textos_publicacion = [
        f"‚ú® ¬°{sexo}s de {region} con {edad}! Viste a tu peludito con nuestra nueva colecci√≥n y haz que destaque en cada paseo. ¬°S√≠guenos para m√°s! üêæ",
        f"üê∂ Porque tu mejor amigo merece verse como t√∫: con estilo. Nueva colecci√≥n para {sexo}s de {edad} que aman a sus mascotas en {region}. ¬°S√≠guenos!",
        f"¬øFr√≠o en {region}? Nuestros abriguitos para perros son tendencia entre {sexo}s de {edad}. ¬°Dale estilo a tu compa√±ero peludo! üëëüêï",
        f"Dise√±os √∫nicos que enamoran a {sexo}s de {edad} en {region}. Tu perrito merece verse incre√≠ble en cada paseo. ¬°S√≠guenos para m√°s novedades! üéÄ",
        f"Los perritos m√°s estilosos de {region} usan nuestra ropa. Especial para {sexo}s de {edad} que consienten a sus mascotas. ¬°Dale amor con estilo! ‚ù§Ô∏è",
        f"¬ø{sexo} amante de los perros en {region}? Tenemos los dise√±os que tu mascota necesita. Calidad y estilo a cada paso. ¬°S√≠guenos! ü¶Æ",
        f"Moda canina exclusiva para {sexo}s de {edad} en {region}. Porque tu perrito merece ser tendencia. ¬°Descubre nuestra nueva colecci√≥n! üêï‚Äçü¶∫",
        f"Amor por las mascotas + dise√±o de calidad = La marca favorita de {sexo}s de {edad} en {region}. ¬°S√≠guenos para novedades semanales! üõçÔ∏è",
        f"En {region} los perritos m√°s cool siguen nuestro estilo. Ideal para {sexo}s de {edad} que aman consentir a sus mascotas. ¬°√önete! üåü",
        f"Ropa que har√° que tu perrito reciba cumplidos en cada paseo por {region}. {sexo}s de {edad}, ¬°esto es para ustedes! üì∏"
    ]
    
    try:
        if OPENAI_API_KEY == "TU_OPENAI_API_KEY" or not client:
            # Si no hay API key configurada, usar textos ficticios
            return random.choice(textos_publicacion)
            
        prompt = f"Escribe un copy inspirador de hasta 150 caracteres para un Reel sobre moda canina, dirigido a {edad}, {sexo} en {region}, invit√°ndolos a seguir la cuenta."
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # Volvemos a usar un modelo compatible
            messages=[{"role": "user", "content": prompt}],
            max_tokens=100
        )
        
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"Error al generar texto para publicaci√≥n: {str(e)}")
        return random.choice(textos_publicacion)